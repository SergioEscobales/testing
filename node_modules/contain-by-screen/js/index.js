"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = containByScreen;

var _flatten = _interopRequireDefault(require("lodash/flatten"));

var _uniq = _interopRequireDefault(require("lodash/uniq"));

function containByScreen(element, anchorPoint, options) {
  if (process.env.NODE_ENV !== 'production' && window.getComputedStyle) {
    var style = window.getComputedStyle(element);

    if (style.position !== 'fixed') {
      // eslint-disable-next-line no-console
      console.error('containByScreen only works on fixed position elements', element);
    }
  }

  var elRect = getBoundingClientRect(element);
  var anchorRect = getBoundingClientRect(anchorPoint);
  var buffers = {
    all: options.buffer || 0,
    top: options.topBuffer || 0,
    bottom: options.bottomBuffer || 0,
    left: options.leftBuffer || 0,
    right: options.rightBuffer || 0
  };
  var optionPositions = Array.isArray(options.position) ? options.position : [options.position].filter(Boolean);
  var optionHAligns = Array.isArray(options.hAlign) ? options.hAlign : [options.hAlign].filter(Boolean);
  var optionVAligns = Array.isArray(options.vAlign) ? options.vAlign : [options.vAlign].filter(Boolean);
  var positions = optionPositions.length > 0 && options.forcePosition ? optionPositions : (0, _uniq.default)(optionPositions.concat(['top', 'bottom', 'left', 'right']));
  var hAligns = optionHAligns.length > 0 && options.forceHAlign ? optionHAligns : (0, _uniq.default)(optionHAligns.concat(['center', 'left', 'right']));
  var vAligns = optionVAligns.length > 0 && options.forceVAlign ? optionVAligns : (0, _uniq.default)(optionVAligns.concat(['center', 'top', 'bottom']));
  var allPossibleChoices = (0, _flatten.default)(positions.map(function (position) {
    return position === 'cover' ? (0, _flatten.default)(hAligns.map(function (hAlign) {
      return vAligns.map(function (vAlign) {
        return {
          position: position,
          hAlign: hAlign,
          vAlign: vAlign
        };
      });
    })) : position === 'top' || position === 'bottom' ? hAligns.map(function (hAlign) {
      return {
        position: position,
        hAlign: hAlign,
        vAlign: 'center'
      };
    }) : vAligns.map(function (vAlign) {
      return {
        position: position,
        hAlign: 'center',
        vAlign: vAlign
      };
    });
  }));
  var choiceAndCoord = null;

  for (var i = 0; i < allPossibleChoices.length; i++) {
    var choice = allPossibleChoices[i];
    var coord = positionAndAlign(elRect, anchorRect, choice, buffers);
    var top = coord.top,
        left = coord.left;

    if (top - buffers.all - buffers.top >= 0 && left - buffers.all - buffers.left >= 0 && top + elRect.height + buffers.all + buffers.bottom <= window.innerHeight && left + elRect.width + buffers.all + buffers.right <= window.innerWidth) {
      choiceAndCoord = {
        choice: choice,
        coord: coord
      };
      break;
    }
  } // Fallback if we failed to find a position that fit on the screen.


  if (!choiceAndCoord) {
    var _choice = {
      position: optionPositions[0] || 'top',
      hAlign: optionHAligns[0] || 'center',
      vAlign: optionVAligns[0] || 'center'
    };
    choiceAndCoord = {
      choice: _choice,
      coord: positionAndAlign(elRect, anchorRect, _choice, buffers)
    };
  }

  element.style.top = "".concat(choiceAndCoord.coord.top, "px");
  element.style.left = "".concat(choiceAndCoord.coord.left, "px");
  return choiceAndCoord.choice;
}

function getBoundingClientRect(el) {
  var rect = el.getBoundingClientRect();

  if (!('width' in rect)) {
    // IE <9 support
    rect = Object.assign({
      width: rect.right - rect.left,
      height: rect.bottom - rect.top
    }, rect);
  }

  return rect;
}

function positionAndAlign(elRect, anchorRect, _ref, buffers) {
  var position = _ref.position,
      hAlign = _ref.hAlign,
      vAlign = _ref.vAlign;
  var top = 0,
      left = 0;

  if (position === 'cover') {
    switch (hAlign) {
      case 'center':
        left = Math.round((anchorRect.left + anchorRect.right - elRect.width) / 2);
        break;

      case 'left':
        left = Math.floor(anchorRect.left);
        break;

      case 'right':
        left = Math.ceil(anchorRect.right - elRect.width);
        break;

      default:
        throw new Error('Should not happen');
    }

    switch (vAlign) {
      case 'center':
        top = Math.round((anchorRect.top + anchorRect.bottom - elRect.height) / 2);
        break;

      case 'top':
        top = Math.floor(anchorRect.top);
        break;

      case 'bottom':
        top = Math.ceil(anchorRect.bottom - elRect.height);
        break;

      default:
        throw new Error('Should not happen');
    }
  } else if (position === 'top' || position === 'bottom') {
    switch (position) {
      case 'top':
        top = Math.floor(anchorRect.top - elRect.height - buffers.all - buffers.bottom);
        break;

      case 'bottom':
        top = Math.ceil(anchorRect.bottom + buffers.all + buffers.top);
        break;

      default:
        throw new Error('Should not happen');
    }

    switch (hAlign) {
      case 'center':
        left = Math.round((anchorRect.left + anchorRect.right - elRect.width) / 2);
        break;

      case 'left':
        left = Math.round(anchorRect.left);
        break;

      case 'right':
        left = Math.round(anchorRect.right - elRect.width);
        break;

      default:
        throw new Error('Should not happen');
    }
  } else {
    switch (position) {
      case 'left':
        left = Math.floor(anchorRect.left - elRect.width - buffers.all - buffers.right);
        break;

      case 'right':
        left = Math.ceil(anchorRect.right + buffers.all + buffers.left);
        break;

      default:
        throw new Error('Should not happen');
    }

    switch (vAlign) {
      case 'center':
        top = Math.round((anchorRect.top + anchorRect.bottom - elRect.height) / 2);
        break;

      case 'top':
        top = Math.round(anchorRect.top);
        break;

      case 'bottom':
        top = Math.round(anchorRect.bottom - elRect.height);
        break;

      default:
        throw new Error('Should not happen');
    }
  }

  return {
    top: top,
    left: left
  };
}

module.exports = exports.default;
module.exports.default = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,