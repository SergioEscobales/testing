"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _kefir = _interopRequireDefault(require("kefir"));

var _kefirBus = _interopRequireDefault(require("kefir-bus"));

var _kefirStopper = _interopRequireDefault(require("kefir-stopper"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _pointRectDistance = _interopRequireDefault(require("./lib/pointRectDistance"));

var _MenuListInspector = _interopRequireDefault(require("./MenuListInspector"));

var _reactFloatAnchor = _interopRequireDefault(require("react-float-anchor"));

var _MenuItem = _interopRequireDefault(require("./MenuItem"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SubMenuItem =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(SubMenuItem, _React$Component);

  function SubMenuItem() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, SubMenuItem);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(SubMenuItem)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      opened: false
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_menuItemRef", _react["default"].createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_floatAnchorRef", _react["default"].createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_menuInspectorRef", _react["default"].createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_menuContainerRef", _react["default"].createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_resetMouseLeaveWatcher", (0, _kefirBus["default"])());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_stopper", (0, _kefirStopper["default"])());
    return _this;
  }

  (0, _createClass2["default"])(SubMenuItem, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._stopper.destroy();
    }
  }, {
    key: "open",
    value: function open() {
      var _this2 = this;

      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();
      menuItem.lockHighlight();
      if (this.state.opened) return Promise.resolve();
      if (this.props.onWillOpen) this.props.onWillOpen();
      menuItem.takeKeyboard();
      return new Promise(function (resolve) {
        _this2.setState({
          opened: true
        }, function () {
          if (_this2.props.onDidOpen) _this2.props.onDidOpen();
          resolve();
        });
      });
    }
  }, {
    key: "close",
    value: function close() {
      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();
      if (!this.state.opened) return;
      if (this.props.onWillClose) this.props.onWillClose();
      this.setState({
        opened: false
      });
      menuItem.releaseKeyboard();
      menuItem.unlockHighlight();
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this.state.opened) {
        this.close();
      } else {
        this.open();
      }
    }
  }, {
    key: "reposition",
    value: function reposition() {
      var floatAnchor = this._floatAnchorRef.current;
      if (!floatAnchor) throw new Error();
      floatAnchor.reposition();
    }
  }, {
    key: "hasHighlight",
    value: function hasHighlight() {
      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();
      return menuItem.hasHighlight();
    }
  }, {
    key: "highlight",
    value: function highlight() {
      var byKeyboard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();
      menuItem.highlight(byKeyboard);
    }
  }, {
    key: "unhighlight",
    value: function unhighlight() {
      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();
      menuItem.unhighlight();
    }
  }, {
    key: "moveCursor",
    value: function moveCursor(direction, prevCursorLocation) {
      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();
      menuItem.moveCursor(direction, prevCursorLocation);
    }
  }, {
    key: "_onHighlightChange",
    value: function _onHighlightChange(highlighted, event) {
      var _this3 = this;

      this._resetMouseLeaveWatcher.emit(null);

      if (highlighted && !event.byKeyboard) {
        var OPEN_DELAY = 200;

        _kefir["default"].later(OPEN_DELAY).takeUntilBy(this._resetMouseLeaveWatcher).takeUntilBy(this._stopper).onValue(function () {
          _this3.open();
        });
      } else if (!highlighted) {
        this.close();
      }
    }
  }, {
    key: "_onMouseLeaveItem",
    value: function _onMouseLeaveItem(event) {
      var _this4 = this;

      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();

      if (!this.state.opened) {
        menuItem.unhighlight();
        return;
      }

      var menuContainer = this._menuContainerRef.current;
      if (!menuContainer) throw new Error(); // If the mouse isn't going toward the menu, then unhighlight ourself.

      var menuRect = menuContainer.getBoundingClientRect();
      var startTime = Date.now();
      var startX = event.pageX,
          startY = event.pageY;

      function getDistance(x, y) {
        return (0, _pointRectDistance["default"])(x, y, menuRect.left, menuRect.top, menuRect.right - menuRect.width, menuRect.bottom - menuRect.top);
      }

      var startDistance = getDistance(startX, startY);
      var lastCoords = {
        pageX: startX,
        pageY: startY
      }; // pixels per second the user must be moving the mouse toward the menu for
      // the menu to stay open.

      var MIN_SPEED = 60; // ms before the menu will close if the user hasn't reached it yet, no
      // matter how they're moving the cursor toward it.

      var MAX_TIME = 750; // ms to offset start time, to set maxDistance back a little so it's not so
      // unforgiving at the very start.

      var LEAD_TIME = 50; // Listen to mouse moves, find the first event not going towards the menu,
      // and end it there. Or end after a timer.

      _kefir["default"].fromEvents(window, 'mousemove').bufferBy(_kefir["default"].interval(60, null)).map(function (events) {
        if (events.length) {
          var last = events[events.length - 1];
          lastCoords = {
            pageX: last.pageX,
            pageY: last.pageY
          };
        }

        return lastCoords;
      }).filter(function (_ref) {
        var pageX = _ref.pageX,
            pageY = _ref.pageY;
        var distance = getDistance(pageX, pageY);
        var maxDistance = startDistance - (Date.now() - startTime - LEAD_TIME) / 1000 * MIN_SPEED;
        return distance > maxDistance;
      }).merge(_kefir["default"].later(MAX_TIME * 1000)).take(1).takeUntilBy(this._resetMouseLeaveWatcher).takeUntilBy(this._stopper).onValue(function () {
        _this4.close();

        menuItem.unhighlight();
      });
    }
  }, {
    key: "_mouseEnterMenu",
    value: function _mouseEnterMenu() {
      var menuItem = this._menuItemRef.current;
      if (!menuItem) throw new Error();

      this._resetMouseLeaveWatcher.emit(null);

      menuItem.unlockHighlight();
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var _this$props = this.props,
          index = _this$props.index,
          highlightedStyle = _this$props.highlightedStyle,
          highlightedClassName = _this$props.highlightedClassName,
          positionOptions = _this$props.positionOptions,
          menuZIndex = _this$props.menuZIndex,
          children = _this$props.children,
          menu = _this$props.menu;
      var opened = this.state.opened;
      var style = this.props.style;
      var className = this.props.className;

      if (opened) {
        if (this.props.openedStyle) {
          style = _objectSpread({}, style, {}, this.props.openedStyle);
        }

        if (this.props.openedClassName) {
          className = "".concat(className || '', " ").concat(this.props.openedClassName);
        }
      }

      return _react["default"].createElement(_reactFloatAnchor["default"], {
        parentElement: this.props.menuParentElement,
        ref: this._floatAnchorRef,
        options: positionOptions,
        zIndex: menuZIndex,
        anchor: function anchor(anchorRef) {
          return _react["default"].createElement(_MenuItem["default"], {
            ref: _this5._menuItemRef,
            domRef: anchorRef,
            index: index,
            style: style,
            className: className,
            highlightedStyle: highlightedStyle,
            highlightedClassName: highlightedClassName,
            onHighlightChange: function onHighlightChange(h, e) {
              return _this5._onHighlightChange(h, e);
            },
            onMouseLeave: function onMouseLeave(e) {
              return _this5._onMouseLeaveItem(e);
            },
            onRightPushed: function onRightPushed(e) {
              if (!_this5.state.opened) {
                e.stopPropagation();
                e.preventDefault();

                _this5.open();

                var menuInspector = _this5._menuInspectorRef.current;
                if (!menuInspector) throw new Error();
                menuInspector.moveCursor('down');
              }
            },
            onItemChosen: function onItemChosen(e) {
              e.stopPropagation();
              e.preventDefault();

              _this5.open();

              if (e.byKeyboard) {
                var menuInspector = _this5._menuInspectorRef.current;
                if (!menuInspector) throw new Error();
                menuInspector.moveCursor('down');
              }
            },
            "aria-haspopup": true,
            "aria-expanded": opened
          }, children);
        },
        "float": !opened ? null : _react["default"].createElement(_MenuListInspector["default"], {
          ref: this._menuInspectorRef,
          onLeftPushed: function onLeftPushed(e) {
            e.stopPropagation();
            e.preventDefault();

            _this5.close();
          }
        }, _react["default"].createElement("div", {
          ref: this._menuContainerRef,
          onMouseEnter: function onMouseEnter() {
            return _this5._mouseEnterMenu();
          }
        }, menu))
      });
    }
  }]);
  return SubMenuItem;
}(_react["default"].Component);

exports["default"] = SubMenuItem;
(0, _defineProperty2["default"])(SubMenuItem, "propTypes", {
  menu: _propTypes["default"].node,
  positionOptions: _propTypes["default"].object,
  menuZIndex: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
  onWillOpen: _propTypes["default"].func,
  onDidOpen: _propTypes["default"].func,
  onWillClose: _propTypes["default"].func,
  className: _propTypes["default"].string,
  style: _propTypes["default"].object,
  highlightedClassName: _propTypes["default"].string,
  highlightedStyle: _propTypes["default"].object,
  index: _propTypes["default"].number,
  openedClassName: _propTypes["default"].string,
  openedStyle: _propTypes["default"].object,
  onItemChosen: _propTypes["default"].func,
  onHighlightChange: _propTypes["default"].func,
  children: _propTypes["default"].node
});
(0, _defineProperty2["default"])(SubMenuItem, "defaultProps", {
  positionOptions: {
    position: 'right',
    vAlign: 'top',
    hAlign: 'left'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,