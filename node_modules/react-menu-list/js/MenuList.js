"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.MenuListContext = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _kefir = _interopRequireDefault(require("kefir"));

var _kefirStopper = _interopRequireDefault(require("kefir-stopper"));

var _arrayFindIndex = _interopRequireDefault(require("array-find-index"));

var _fromEventsCapture = _interopRequireDefault(require("./lib/fromEventsCapture"));

var _MenuEvent = _interopRequireDefault(require("./events/MenuEvent"));

var _ChosenEvent = _interopRequireDefault(require("./events/ChosenEvent"));

var _MenuListInspector = require("./MenuListInspector");

var MenuListContext = _react["default"].createContext(null);

exports.MenuListContext = MenuListContext;

var MenuList =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2["default"])(MenuList, _React$Component);

  function MenuList() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, MenuList);

    for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(MenuList)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_stopper", (0, _kefirStopper["default"])());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_listItems", []);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_naturalHighlightedIndex", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_lockedHighlightedIndex", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_keyboardTakenByIndex", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_elRef", _react["default"].createRef());
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_menuListContext", {
      registerItem: function registerItem(props, control, el) {
        var item = {
          props: props,
          control: control,
          el: el
        };

        var register = function register() {
          var i = -1;

          if (item.props.index == null) {
            i = (0, _arrayFindIndex["default"])(_this._listItems, function (_item) {
              return (item.el.compareDocumentPosition(_item.el) & Node.DOCUMENT_POSITION_PRECEDING) === 0;
            });
          } else {
            i = (0, _arrayFindIndex["default"])(_this._listItems, function (_item) {
              return _item.props.index != null && item.props.index < _item.props.index;
            });
          }

          if (i < 0) {
            _this._listItems.push(item);
          } else {
            _this._listItems.splice(i, 0, item);

            if (_this._naturalHighlightedIndex != null && i <= _this._naturalHighlightedIndex) {
              _this._naturalHighlightedIndex++;
            }

            if (_this._lockedHighlightedIndex != null && i <= _this._lockedHighlightedIndex) {
              _this._lockedHighlightedIndex++;
            }

            if (_this._keyboardTakenByIndex != null && i <= _this._keyboardTakenByIndex) {
              _this._keyboardTakenByIndex++;
            }
          }
        };

        register();
        var menuListHandle = {
          highlight: function highlight(byKeyboard) {
            var i = _this._listItems.indexOf(item);

            if (i < 0) throw new Error('Already unregistered MenuItem');

            _this._naturalHighlight(i, byKeyboard);
          },
          unhighlight: function unhighlight() {
            var i = _this._listItems.indexOf(item);

            if (i < 0) throw new Error('Already unregistered MenuItem');

            if (_this._naturalHighlightedIndex === i) {
              _this._naturalHighlight(null, false);
            }
          },
          itemChosen: function itemChosen() {
            _this._dispatchEvent(control, new _ChosenEvent["default"]('chosen', false));
          },
          takeKeyboard: function takeKeyboard() {
            var i = _this._listItems.indexOf(item);

            if (i < 0) throw new Error('Already unregistered MenuItem');
            _this._keyboardTakenByIndex = i;
          },
          releaseKeyboard: function releaseKeyboard() {
            var i = _this._listItems.indexOf(item);

            if (i < 0) throw new Error('Already unregistered MenuItem');

            if (_this._keyboardTakenByIndex === i) {
              _this._keyboardTakenByIndex = null;
            }
          },
          lockHighlight: function lockHighlight() {
            var i = _this._listItems.indexOf(item);

            if (i < 0) throw new Error('Already unregistered MenuItem');

            _this._lockHighlight(i);
          },
          unlockHighlight: function unlockHighlight() {
            var i = _this._listItems.indexOf(item);

            if (i < 0) throw new Error('Already unregistered MenuItem');

            if (_this._lockedHighlightedIndex === i) {
              _this._lockHighlight(null);
            }
          },
          moveCursor: function moveCursor(direction, prevCursorLocation) {
            _this.moveCursor(direction, prevCursorLocation);
          },
          updateProps: function updateProps(newProps) {
            if (item.props.index !== newProps.index) {
              var oldIndex = _this._listItems.indexOf(item);

              var isNaturalHighlightIndex = _this._naturalHighlightedIndex === oldIndex;
              var isLockedHighlightIndex = _this._lockedHighlightedIndex === oldIndex;
              var isKeyboardTakenByIndex = _this._keyboardTakenByIndex === oldIndex;
              menuListHandle.unregister();
              props = newProps;
              item.props = newProps;
              register();

              if (isNaturalHighlightIndex || isLockedHighlightIndex || isKeyboardTakenByIndex) {
                var newIndex = _this._listItems.indexOf(item);

                if (isNaturalHighlightIndex) _this._naturalHighlightedIndex = newIndex;
                if (isLockedHighlightIndex) _this._lockedHighlightedIndex = newIndex;
                if (isKeyboardTakenByIndex) _this._keyboardTakenByIndex = newIndex;
              }
            } else {
              props = newProps;
              item.props = newProps;
            }
          },
          unregister: function unregister() {
            var i = _this._listItems.indexOf(item);

            if (i < 0) throw new Error('Already unregistered MenuItem');

            if (i === _this._naturalHighlightedIndex) {
              _this._naturalHighlightedIndex = null;
            } else if (_this._naturalHighlightedIndex != null && i < _this._naturalHighlightedIndex) {
              _this._naturalHighlightedIndex--;
            }

            if (i === _this._lockedHighlightedIndex) {
              _this._lockedHighlightedIndex = null;
            } else if (_this._lockedHighlightedIndex != null && i < _this._lockedHighlightedIndex) {
              _this._lockedHighlightedIndex--;
            }

            if (i === _this._keyboardTakenByIndex) {
              _this._keyboardTakenByIndex = null;
            } else if (_this._keyboardTakenByIndex != null && i < _this._keyboardTakenByIndex) {
              _this._keyboardTakenByIndex--;
            }

            _this._listItems.splice(i, 1);
          }
        };
        return menuListHandle;
      }
    });
    return _this;
  }

  (0, _createClass2["default"])(MenuList, [{
    key: "_getVisibleHighlightedIndex",
    value: function _getVisibleHighlightedIndex() {
      return this._lockedHighlightedIndex != null ? this._lockedHighlightedIndex : this._naturalHighlightedIndex;
    }
  }, {
    key: "_parentCtx",
    value: function _parentCtx() {
      return this.context;
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var isEnterOrArrowKey = function isEnterOrArrowKey(e) {
        return e.which === 13 || 37 <= e.which && e.which <= 40;
      };

      var el = this._elRef.current;
      /*:: if (!el) throw new Error(); */
      // The only things that should receive keydown/keypress events before us
      // are our children. This allows a MenuItem to contain a text input
      // which selectively stops propagation on key events for example.

      _kefir["default"].merge([_kefir["default"].fromEvents(window, 'keydown').filter(isEnterOrArrowKey).filter(function (e) {
        return el.contains(e.target);
      }), (0, _fromEventsCapture["default"])(window, 'keydown').filter(isEnterOrArrowKey).filter(function (e) {
        return !el.contains(e.target);
      })]).takeUntilBy(this._stopper).onValue(function (event) {
        return _this2._key(event);
      });

      var parentCtx = this._parentCtx();

      if (parentCtx) {
        parentCtx.registerMenuList(this);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._stopper.destroy();

      var parentCtx = this._parentCtx();

      if (parentCtx) {
        parentCtx.unregisterMenuList(this);
      }
    }
  }, {
    key: "_naturalHighlight",
    value: function _naturalHighlight(index, byKeyboard, direction, prevCursorLocation) {
      var visibleHighlightedIndex = this._getVisibleHighlightedIndex();

      if (this._lockedHighlightedIndex != null && byKeyboard) {
        this._lockedHighlightedIndex = null;
      }

      this._naturalHighlightedIndex = index;

      if (this._lockedHighlightedIndex == null) {
        if (index != null) {
          this._listItems[index].control.notifyHighlighted(true, byKeyboard, direction, prevCursorLocation);
        }

        if (visibleHighlightedIndex != null && visibleHighlightedIndex != index) {
          this._listItems[visibleHighlightedIndex].control.notifyHighlighted(false);
        }
      }
    }
  }, {
    key: "_lockHighlight",
    value: function _lockHighlight(index) {
      if (index === this._lockedHighlightedIndex) return;

      var visibleHighlightedIndex = this._getVisibleHighlightedIndex();

      this._lockedHighlightedIndex = index;

      var newVisibleHighlightedIndex = this._getVisibleHighlightedIndex();

      if (visibleHighlightedIndex != null && newVisibleHighlightedIndex == null) {
        // When unlocking, prefer to keep the current selection over de-selecting
        // everything.
        this._naturalHighlightedIndex = visibleHighlightedIndex;
      } else if (visibleHighlightedIndex != newVisibleHighlightedIndex) {
        if (visibleHighlightedIndex != null) {
          this._listItems[visibleHighlightedIndex].control.notifyHighlighted(false);
        }

        if (newVisibleHighlightedIndex != null) {
          this._listItems[newVisibleHighlightedIndex].control.notifyHighlighted(true, false);
        } else if (this._naturalHighlightedIndex != null) {
          this._listItems[this._naturalHighlightedIndex].control.notifyHighlighted(true, false);
        }
      }
    }
  }, {
    key: "_dispatchEvent",
    value: function _dispatchEvent(control, event) {
      if (control) {
        control.notifyEvent(event);
        if (event.cancelBubble) return;
      }

      switch (event.type) {
        case 'chosen':
          /*:: if (!(event instanceof ChosenEvent)) throw new Error(); */
          if (this.props.onItemChosen) this.props.onItemChosen(event);
          break;
        // case 'up':
        //   break;
        // case 'down':
        //   break;

        case 'left':
          if (this.props.onLeftPushed) this.props.onLeftPushed(event);
          break;

        case 'right':
          if (this.props.onRightPushed) this.props.onRightPushed(event);
          break;
      }

      if (event.cancelBubble) return;

      var parentCtx = this._parentCtx();

      if (parentCtx) {
        parentCtx.dispatchEvent(event);
      }
    }
  }, {
    key: "_key",
    value: function _key(event) {
      if (this._keyboardTakenByIndex != null || this._listItems.length === 0) {
        return;
      }

      var visibleHighlightedIndex = this._getVisibleHighlightedIndex(); // enter, left, right activate for the current visibly selected item.
      // up and down de-activate any locks in place, so that they act from the last
      // naturally-selected item.


      var mEvent = null;

      switch (event.which) {
        case 13:
          //enter
          if (visibleHighlightedIndex != null) {
            mEvent = new _ChosenEvent["default"]('chosen', true);
            event.preventDefault();
            event.stopPropagation();
          }

          break;

        case 37:
          //left
          if (visibleHighlightedIndex != null) {
            mEvent = new _MenuEvent["default"]('left');
          }

          break;

        case 39:
          //right
          if (visibleHighlightedIndex != null) {
            mEvent = new _MenuEvent["default"]('right');
          }

          break;

        case 38:
          //up
          event.preventDefault();
          event.stopPropagation();
          this.moveCursor('up');
          break;

        case 40:
          //down
          event.preventDefault();
          event.stopPropagation();
          this.moveCursor('down');
          break;
      }

      if (mEvent) {
        var _control = visibleHighlightedIndex == null ? null : this._listItems[visibleHighlightedIndex].control;

        this._dispatchEvent(_control, mEvent);

        if (mEvent.defaultPrevented) event.preventDefault();
        if (mEvent.defaultPrevented || mEvent.cancelBubble) event.stopPropagation();
      }
    }
  }, {
    key: "moveCursor",
    value: function moveCursor(direction, prevCursorLocation) {
      if (this._listItems.length == 0) return;

      switch (direction) {
        case 'up':
          if (this._naturalHighlightedIndex == null || this._naturalHighlightedIndex == 0) {
            this._naturalHighlight(this._listItems.length - 1, true, direction, prevCursorLocation);
          } else {
            this._naturalHighlight(this._naturalHighlightedIndex - 1, true, direction, prevCursorLocation);
          }

          break;

        case 'down':
          if (this._naturalHighlightedIndex == null || this._naturalHighlightedIndex == this._listItems.length - 1) {
            this._naturalHighlight(0, true, direction, prevCursorLocation);
          } else {
            this._naturalHighlight(this._naturalHighlightedIndex + 1, true, direction, prevCursorLocation);
          }

          break;
      }
    }
  }, {
    key: "hasHighlight",
    value: function hasHighlight() {
      return this._getVisibleHighlightedIndex() != null;
    }
  }, {
    key: "render",
    value: function render() {
      return _react["default"].createElement("div", {
        role: "menu",
        ref: this._elRef
      }, _react["default"].createElement(MenuListContext.Provider, {
        value: this._menuListContext
      }, this.props.children));
    }
  }]);
  return MenuList;
}(_react["default"].Component);

exports["default"] = MenuList;
(0, _defineProperty2["default"])(MenuList, "propTypes", {
  onItemChosen: _propTypes["default"].func,
  onLeftPushed: _propTypes["default"].func,
  onRightPushed: _propTypes["default"].func,
  children: _propTypes["default"].node
});
(0, _defineProperty2["default"])(MenuList, "contextType", _MenuListInspector.MenuListInspectorContext);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NZW51TGlzdC5qcyJdLCJuYW1lcyI6WyJNZW51TGlzdENvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJNZW51TGlzdCIsImNyZWF0ZVJlZiIsInJlZ2lzdGVySXRlbSIsInByb3BzIiwiY29udHJvbCIsImVsIiwiaXRlbSIsInJlZ2lzdGVyIiwiaSIsImluZGV4IiwiX2xpc3RJdGVtcyIsIl9pdGVtIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HIiwicHVzaCIsInNwbGljZSIsIl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleCIsIl9sb2NrZWRIaWdobGlnaHRlZEluZGV4IiwiX2tleWJvYXJkVGFrZW5CeUluZGV4IiwibWVudUxpc3RIYW5kbGUiLCJoaWdobGlnaHQiLCJieUtleWJvYXJkIiwiaW5kZXhPZiIsIkVycm9yIiwiX25hdHVyYWxIaWdobGlnaHQiLCJ1bmhpZ2hsaWdodCIsIml0ZW1DaG9zZW4iLCJfZGlzcGF0Y2hFdmVudCIsIkNob3NlbkV2ZW50IiwidGFrZUtleWJvYXJkIiwicmVsZWFzZUtleWJvYXJkIiwibG9ja0hpZ2hsaWdodCIsIl9sb2NrSGlnaGxpZ2h0IiwidW5sb2NrSGlnaGxpZ2h0IiwibW92ZUN1cnNvciIsImRpcmVjdGlvbiIsInByZXZDdXJzb3JMb2NhdGlvbiIsInVwZGF0ZVByb3BzIiwibmV3UHJvcHMiLCJvbGRJbmRleCIsImlzTmF0dXJhbEhpZ2hsaWdodEluZGV4IiwiaXNMb2NrZWRIaWdobGlnaHRJbmRleCIsImlzS2V5Ym9hcmRUYWtlbkJ5SW5kZXgiLCJ1bnJlZ2lzdGVyIiwibmV3SW5kZXgiLCJjb250ZXh0IiwiaXNFbnRlck9yQXJyb3dLZXkiLCJlIiwid2hpY2giLCJfZWxSZWYiLCJjdXJyZW50IiwiS2VmaXIiLCJtZXJnZSIsImZyb21FdmVudHMiLCJ3aW5kb3ciLCJmaWx0ZXIiLCJjb250YWlucyIsInRhcmdldCIsInRha2VVbnRpbEJ5IiwiX3N0b3BwZXIiLCJvblZhbHVlIiwiZXZlbnQiLCJfa2V5IiwicGFyZW50Q3R4IiwiX3BhcmVudEN0eCIsInJlZ2lzdGVyTWVudUxpc3QiLCJkZXN0cm95IiwidW5yZWdpc3Rlck1lbnVMaXN0IiwidmlzaWJsZUhpZ2hsaWdodGVkSW5kZXgiLCJfZ2V0VmlzaWJsZUhpZ2hsaWdodGVkSW5kZXgiLCJub3RpZnlIaWdobGlnaHRlZCIsIm5ld1Zpc2libGVIaWdobGlnaHRlZEluZGV4Iiwibm90aWZ5RXZlbnQiLCJjYW5jZWxCdWJibGUiLCJ0eXBlIiwib25JdGVtQ2hvc2VuIiwib25MZWZ0UHVzaGVkIiwib25SaWdodFB1c2hlZCIsImRpc3BhdGNoRXZlbnQiLCJsZW5ndGgiLCJtRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIk1lbnVFdmVudCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJfbWVudUxpc3RDb250ZXh0IiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJmdW5jIiwibm9kZSIsIk1lbnVMaXN0SW5zcGVjdG9yQ29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUF1Q08sSUFBTUEsZUFBZSxHQUFHQyxrQkFBTUMsYUFBTixDQUEyQyxJQUEzQyxDQUF4Qjs7OztJQVNjQyxROzs7Ozs7Ozs7Ozs7Ozs7OztpR0FRUiwrQjttR0FJTixFOzs7OytGQU9JRixrQkFBTUcsU0FBTixFO3lHQVNnQztBQUN2Q0MsTUFBQUEsWUFBWSxFQUFFLHNCQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUJDLEVBQWpCLEVBQXdCO0FBQ3BDLFlBQU1DLElBQUksR0FBRztBQUFDSCxVQUFBQSxLQUFLLEVBQUxBLEtBQUQ7QUFBUUMsVUFBQUEsT0FBTyxFQUFQQSxPQUFSO0FBQWlCQyxVQUFBQSxFQUFFLEVBQUZBO0FBQWpCLFNBQWI7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QUFpQyxLQUFLUCxVQUFMLENBQWdCc0UsTUFBaEIsR0FBdUIsQ0FBckcsRUFBd0c7QUFDdEcsaUJBQUt2RCxpQkFBTCxDQUF1QixDQUF2QixFQUEwQixJQUExQixFQUFnQ1csU0FBaEMsRUFBMkNDLGtCQUEzQztBQUNELFdBRkQsTUFFTztBQUNMLGlCQUFLWixpQkFBTCxDQUF1QixLQUFLUix3QkFBTCxHQUE4QixDQUFyRCxFQUF3RCxJQUF4RCxFQUE4RG1CLFNBQTlELEVBQXlFQyxrQkFBekU7QUFDRDs7QUFDRDtBQWRGO0FBZ0JEOzs7bUNBRXVCO0FBQ3RCLGFBQU8sS0FBS2lDLDJCQUFMLE1BQXNDLElBQTdDO0FBQ0Q7Ozs2QkFFUTtBQUNQLGFBQ0U7QUFBSyxRQUFBLElBQUksRUFBQyxNQUFWO0FBQWlCLFFBQUEsR0FBRyxFQUFFLEtBQUtwQjtBQUEzQixTQUNFLGdDQUFDLGVBQUQsQ0FBaUIsUUFBakI7QUFBMEIsUUFBQSxLQUFLLEVBQUUsS0FBS29DO0FBQXRDLFNBQ0csS0FBS25GLEtBQUwsQ0FBV29GLFFBRGQsQ0FERixDQURGO0FBT0Q7OztFQXZWbUN6RixrQkFBTTBGLFM7OztpQ0FBdkJ4RixRLGVBQ0E7QUFDakI0RSxFQUFBQSxZQUFZLEVBQUVhLHNCQUFVQyxJQURQO0FBRWpCYixFQUFBQSxZQUFZLEVBQUVZLHNCQUFVQyxJQUZQO0FBR2pCWixFQUFBQSxhQUFhLEVBQUVXLHNCQUFVQyxJQUhSO0FBSWpCSCxFQUFBQSxRQUFRLEVBQUVFLHNCQUFVRTtBQUpILEM7aUNBREEzRixRLGlCQTBCRTRGLDJDIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHtOb2RlIGFzIFJlYWN0Tm9kZX0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBLZWZpciBmcm9tICdrZWZpcic7XG5pbXBvcnQga2VmaXJTdG9wcGVyIGZyb20gJ2tlZmlyLXN0b3BwZXInO1xuaW1wb3J0IGZpbmRJbmRleCBmcm9tICdhcnJheS1maW5kLWluZGV4JztcbmltcG9ydCBmcm9tRXZlbnRzQ2FwdHVyZSBmcm9tICcuL2xpYi9mcm9tRXZlbnRzQ2FwdHVyZSc7XG5cbmltcG9ydCBNZW51RXZlbnQgZnJvbSAnLi9ldmVudHMvTWVudUV2ZW50JztcbmltcG9ydCBDaG9zZW5FdmVudCBmcm9tICcuL2V2ZW50cy9DaG9zZW5FdmVudCc7XG5pbXBvcnQgdHlwZSB7UHJvcHMgYXMgTWVudUl0ZW1Qcm9wc30gZnJvbSAnLi9NZW51SXRlbSc7XG5pbXBvcnQge01lbnVMaXN0SW5zcGVjdG9yQ29udGV4dH0gZnJvbSAnLi9NZW51TGlzdEluc3BlY3Rvcic7XG5pbXBvcnQgdHlwZSB7TWVudUxpc3RJbnNwZWN0b3JDb250ZXh0VmFsdWV9IGZyb20gJy4vTWVudUxpc3RJbnNwZWN0b3InO1xuaW1wb3J0IHR5cGUge0RpcmVjdGlvbiwgUmVjdH0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIFRoaXMgdHlwZSBvZiBvYmplY3QgaXMgZ2l2ZW4gdG8gYSBNZW51SXRlbSB0byB0YWxrIHRvIHRoZSBNZW51TGlzdC5cbmV4cG9ydCB0eXBlIE1lbnVMaXN0SGFuZGxlID0ge1xuICBoaWdobGlnaHQoYnlLZXlib2FyZDogYm9vbGVhbik6IHZvaWQ7XG4gIHVuaGlnaGxpZ2h0KCk6IHZvaWQ7XG4gIG1vdmVDdXJzb3IoZGlyZWN0aW9uOiBEaXJlY3Rpb24sIHByZXZDdXJzb3JMb2NhdGlvbjogP1JlY3QpOiB2b2lkO1xuICBpdGVtQ2hvc2VuKCk6IHZvaWQ7XG4gIHRha2VLZXlib2FyZCgpOiB2b2lkO1xuICByZWxlYXNlS2V5Ym9hcmQoKTogdm9pZDtcbiAgbG9ja0hpZ2hsaWdodCgpOiB2b2lkO1xuICB1bmxvY2tIaWdobGlnaHQoKTogdm9pZDtcbiAgdXBkYXRlUHJvcHMocHJvcHM6IE1lbnVJdGVtUHJvcHMpOiB2b2lkO1xuICB1bnJlZ2lzdGVyKCk6IHZvaWQ7XG59O1xuXG4vLyBUaGlzIHR5cGUgb2Ygb2JqZWN0IGlzIGdpdmVuIHRvIGEgTWVudUxpc3QgdG8gdGFsayB0byBhIE1lbnVJdGVtLlxuZXhwb3J0IHR5cGUgTWVudUl0ZW1Db250cm9sID0ge1xuICBub3RpZnlIaWdobGlnaHRlZChcbiAgICBoaWdobGlnaHRlZDogYm9vbGVhbixcbiAgICBieUtleWJvYXJkOiA/Ym9vbGVhbixcbiAgICBkaXJlY3Rpb246ID9EaXJlY3Rpb24sXG4gICAgcHJldkN1cnNvckxvY2F0aW9uOiA/UmVjdFxuICApOiB2b2lkO1xuICBub3RpZnlFdmVudChldmVudDogTWVudUV2ZW50KTogdm9pZDtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHR5cGUgb2YgdGhlIG9iamVjdCB0aGF0IE1lbnVMaXN0IGdpdmVzIGFzIGNvbnRleHQgdG8gaXRzXG4vLyBkZXNjZW5kYW50cy5cbmV4cG9ydCB0eXBlIE1lbnVMaXN0Q29udGV4dFZhbHVlID0ge1xuICByZWdpc3Rlckl0ZW0oXG4gICAgcHJvcHM6IE1lbnVJdGVtUHJvcHMsXG4gICAgY29udHJvbDogTWVudUl0ZW1Db250cm9sLFxuICAgIGVsOiBIVE1MRWxlbWVudFxuICApOiBNZW51TGlzdEhhbmRsZTtcbn07XG5cbmV4cG9ydCBjb25zdCBNZW51TGlzdENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PD9NZW51TGlzdENvbnRleHRWYWx1ZT4obnVsbCk7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICBvbkl0ZW1DaG9zZW4/OiAoZXZlbnQ6IENob3NlbkV2ZW50KSA9PiB2b2lkO1xuICBvbkxlZnRQdXNoZWQ/OiAoZXZlbnQ6IE1lbnVFdmVudCkgPT4gdm9pZDtcbiAgb25SaWdodFB1c2hlZD86IChldmVudDogTWVudUV2ZW50KSA9PiB2b2lkO1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgb25JdGVtQ2hvc2VuOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkxlZnRQdXNoZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uUmlnaHRQdXNoZWQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxuICB9O1xuXG4gIF9zdG9wcGVyID0ga2VmaXJTdG9wcGVyKCk7XG4gIF9saXN0SXRlbXM6IEFycmF5PHtcbiAgICBwcm9wczogTWVudUl0ZW1Qcm9wcztcbiAgICBjb250cm9sOiBNZW51SXRlbUNvbnRyb2w7XG4gIH0+ID0gW107XG5cbiAgLy8gVGhlIG5hdHVyYWwgaGlnaGxpZ2h0IGlzIHdoZXJlIHRoZSBoaWdobGlnaHQgd291bGQgYmUgaWYgbm8gbG9jayBpcyBhY3RpdmUuXG4gIF9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleDogP251bWJlcjtcbiAgX2xvY2tlZEhpZ2hsaWdodGVkSW5kZXg6ID9udW1iZXI7XG4gIF9rZXlib2FyZFRha2VuQnlJbmRleDogP251bWJlcjtcblxuICBfZWxSZWYgPSBSZWFjdC5jcmVhdGVSZWY8SFRNTERpdkVsZW1lbnQ+KCk7XG5cbiAgX2dldFZpc2libGVIaWdobGlnaHRlZEluZGV4KCk6ID9udW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9sb2NrZWRIaWdobGlnaHRlZEluZGV4ICE9IG51bGwgP1xuICAgICAgdGhpcy5fbG9ja2VkSGlnaGxpZ2h0ZWRJbmRleCA6IHRoaXMuX25hdHVyYWxIaWdobGlnaHRlZEluZGV4O1xuICB9XG5cbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTWVudUxpc3RJbnNwZWN0b3JDb250ZXh0O1xuXG4gIF9tZW51TGlzdENvbnRleHQ6IE1lbnVMaXN0Q29udGV4dFZhbHVlID0ge1xuICAgIHJlZ2lzdGVySXRlbTogKHByb3BzLCBjb250cm9sLCBlbCkgPT4ge1xuICAgICAgY29uc3QgaXRlbSA9IHtwcm9wcywgY29udHJvbCwgZWx9O1xuXG4gICAgICBjb25zdCByZWdpc3RlciA9ICgpID0+IHtcbiAgICAgICAgbGV0IGkgPSAtMTtcbiAgICAgICAgaWYgKGl0ZW0ucHJvcHMuaW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgIGkgPSBmaW5kSW5kZXgoXG4gICAgICAgICAgICB0aGlzLl9saXN0SXRlbXMsXG4gICAgICAgICAgICBfaXRlbSA9PlxuICAgICAgICAgICAgICAoaXRlbS5lbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihfaXRlbS5lbCkmTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9QUkVDRURJTkcpID09PSAwXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpID0gZmluZEluZGV4KFxuICAgICAgICAgICAgdGhpcy5fbGlzdEl0ZW1zLFxuICAgICAgICAgICAgX2l0ZW0gPT4gX2l0ZW0ucHJvcHMuaW5kZXggIT0gbnVsbCAmJiBpdGVtLnByb3BzLmluZGV4IDwgX2l0ZW0ucHJvcHMuaW5kZXhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgIHRoaXMuX2xpc3RJdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2xpc3RJdGVtcy5zcGxpY2UoaSwgMCwgaXRlbSk7XG4gICAgICAgICAgaWYgKHRoaXMuX25hdHVyYWxIaWdobGlnaHRlZEluZGV4ICE9IG51bGwgJiYgaSA8PSB0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuX2xvY2tlZEhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbCAmJiBpIDw9IHRoaXMuX2xvY2tlZEhpZ2hsaWdodGVkSW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2tlZEhpZ2hsaWdodGVkSW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuX2tleWJvYXJkVGFrZW5CeUluZGV4ICE9IG51bGwgJiYgaSA8PSB0aGlzLl9rZXlib2FyZFRha2VuQnlJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fa2V5Ym9hcmRUYWtlbkJ5SW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJlZ2lzdGVyKCk7XG5cbiAgICAgIGNvbnN0IG1lbnVMaXN0SGFuZGxlOiBNZW51TGlzdEhhbmRsZSA9IHtcbiAgICAgICAgaGlnaGxpZ2h0OiAoYnlLZXlib2FyZDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9saXN0SXRlbXMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICBpZiAoaSA8IDApIHRocm93IG5ldyBFcnJvcignQWxyZWFkeSB1bnJlZ2lzdGVyZWQgTWVudUl0ZW0nKTtcbiAgICAgICAgICB0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0KGksIGJ5S2V5Ym9hcmQpO1xuICAgICAgICB9LFxuICAgICAgICB1bmhpZ2hsaWdodDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9saXN0SXRlbXMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICBpZiAoaSA8IDApIHRocm93IG5ldyBFcnJvcignQWxyZWFkeSB1bnJlZ2lzdGVyZWQgTWVudUl0ZW0nKTtcbiAgICAgICAgICBpZiAodGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXggPT09IGkpIHtcbiAgICAgICAgICAgIHRoaXMuX25hdHVyYWxIaWdobGlnaHQobnVsbCwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaXRlbUNob3NlbjogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoY29udHJvbCwgbmV3IENob3NlbkV2ZW50KCdjaG9zZW4nLCBmYWxzZSkpO1xuICAgICAgICB9LFxuICAgICAgICB0YWtlS2V5Ym9hcmQ6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBpID0gdGhpcy5fbGlzdEl0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgaWYgKGkgPCAwKSB0aHJvdyBuZXcgRXJyb3IoJ0FscmVhZHkgdW5yZWdpc3RlcmVkIE1lbnVJdGVtJyk7XG4gICAgICAgICAgdGhpcy5fa2V5Ym9hcmRUYWtlbkJ5SW5kZXggPSBpO1xuICAgICAgICB9LFxuICAgICAgICByZWxlYXNlS2V5Ym9hcmQ6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBpID0gdGhpcy5fbGlzdEl0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgaWYgKGkgPCAwKSB0aHJvdyBuZXcgRXJyb3IoJ0FscmVhZHkgdW5yZWdpc3RlcmVkIE1lbnVJdGVtJyk7XG4gICAgICAgICAgaWYgKHRoaXMuX2tleWJvYXJkVGFrZW5CeUluZGV4ID09PSBpKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlib2FyZFRha2VuQnlJbmRleCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb2NrSGlnaGxpZ2h0OiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2xpc3RJdGVtcy5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAgIGlmIChpIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdBbHJlYWR5IHVucmVnaXN0ZXJlZCBNZW51SXRlbScpO1xuICAgICAgICAgIHRoaXMuX2xvY2tIaWdobGlnaHQoaSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVubG9ja0hpZ2hsaWdodDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9saXN0SXRlbXMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICBpZiAoaSA8IDApIHRocm93IG5ldyBFcnJvcignQWxyZWFkeSB1bnJlZ2lzdGVyZWQgTWVudUl0ZW0nKTtcbiAgICAgICAgICBpZiAodGhpcy5fbG9ja2VkSGlnaGxpZ2h0ZWRJbmRleCA9PT0gaSkge1xuICAgICAgICAgICAgdGhpcy5fbG9ja0hpZ2hsaWdodChudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vdmVDdXJzb3I6IChkaXJlY3Rpb246IERpcmVjdGlvbiwgcHJldkN1cnNvckxvY2F0aW9uOiA/UmVjdCkgPT4ge1xuICAgICAgICAgIHRoaXMubW92ZUN1cnNvcihkaXJlY3Rpb24sIHByZXZDdXJzb3JMb2NhdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVByb3BzOiAobmV3UHJvcHM6IE1lbnVJdGVtUHJvcHMpID0+IHtcbiAgICAgICAgICBpZiAoaXRlbS5wcm9wcy5pbmRleCAhPT0gbmV3UHJvcHMuaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IG9sZEluZGV4ID0gdGhpcy5fbGlzdEl0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgICBjb25zdCBpc05hdHVyYWxIaWdobGlnaHRJbmRleCA9IHRoaXMuX25hdHVyYWxIaWdobGlnaHRlZEluZGV4ID09PSBvbGRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGlzTG9ja2VkSGlnaGxpZ2h0SW5kZXggPSB0aGlzLl9sb2NrZWRIaWdobGlnaHRlZEluZGV4ID09PSBvbGRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGlzS2V5Ym9hcmRUYWtlbkJ5SW5kZXggPSB0aGlzLl9rZXlib2FyZFRha2VuQnlJbmRleCA9PT0gb2xkSW5kZXg7XG5cbiAgICAgICAgICAgIG1lbnVMaXN0SGFuZGxlLnVucmVnaXN0ZXIoKTtcbiAgICAgICAgICAgIHByb3BzID0gbmV3UHJvcHM7XG4gICAgICAgICAgICBpdGVtLnByb3BzID0gbmV3UHJvcHM7XG4gICAgICAgICAgICByZWdpc3RlcigpO1xuXG4gICAgICAgICAgICBpZiAoaXNOYXR1cmFsSGlnaGxpZ2h0SW5kZXggfHwgaXNMb2NrZWRIaWdobGlnaHRJbmRleCB8fCBpc0tleWJvYXJkVGFrZW5CeUluZGV4KSB7XG4gICAgICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5fbGlzdEl0ZW1zLmluZGV4T2YoaXRlbSk7XG4gICAgICAgICAgICAgIGlmIChpc05hdHVyYWxIaWdobGlnaHRJbmRleCkgdGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXggPSBuZXdJbmRleDtcbiAgICAgICAgICAgICAgaWYgKGlzTG9ja2VkSGlnaGxpZ2h0SW5kZXgpIHRoaXMuX2xvY2tlZEhpZ2hsaWdodGVkSW5kZXggPSBuZXdJbmRleDtcbiAgICAgICAgICAgICAgaWYgKGlzS2V5Ym9hcmRUYWtlbkJ5SW5kZXgpIHRoaXMuX2tleWJvYXJkVGFrZW5CeUluZGV4ID0gbmV3SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzID0gbmV3UHJvcHM7XG4gICAgICAgICAgICBpdGVtLnByb3BzID0gbmV3UHJvcHM7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1bnJlZ2lzdGVyOiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2xpc3RJdGVtcy5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAgIGlmIChpIDwgMCkgdGhyb3cgbmV3IEVycm9yKCdBbHJlYWR5IHVucmVnaXN0ZXJlZCBNZW51SXRlbScpO1xuICAgICAgICAgIGlmIChpID09PSB0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXggPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbCAmJiBpIDwgdGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX25hdHVyYWxIaWdobGlnaHRlZEluZGV4LS07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpID09PSB0aGlzLl9sb2NrZWRIaWdobGlnaHRlZEluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrZWRIaWdobGlnaHRlZEluZGV4ID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2xvY2tlZEhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbCAmJiBpIDwgdGhpcy5fbG9ja2VkSGlnaGxpZ2h0ZWRJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fbG9ja2VkSGlnaGxpZ2h0ZWRJbmRleC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaSA9PT0gdGhpcy5fa2V5Ym9hcmRUYWtlbkJ5SW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX2tleWJvYXJkVGFrZW5CeUluZGV4ID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2tleWJvYXJkVGFrZW5CeUluZGV4ICE9IG51bGwgJiYgaSA8IHRoaXMuX2tleWJvYXJkVGFrZW5CeUluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlib2FyZFRha2VuQnlJbmRleC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9saXN0SXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIG1lbnVMaXN0SGFuZGxlO1xuICAgIH1cbiAgfTtcblxuICBfcGFyZW50Q3R4KCk6ID9NZW51TGlzdEluc3BlY3RvckNvbnRleHRWYWx1ZSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dDtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IGlzRW50ZXJPckFycm93S2V5ID0gZSA9PlxuICAgICAgKGUud2hpY2ggPT09IDEzKSB8fCAoMzcgPD0gZS53aGljaCAmJiBlLndoaWNoIDw9IDQwKTtcbiAgICBjb25zdCBlbCA9IHRoaXMuX2VsUmVmLmN1cnJlbnQ7XG4gICAgLyo6OiBpZiAoIWVsKSB0aHJvdyBuZXcgRXJyb3IoKTsgKi9cblxuICAgIC8vIFRoZSBvbmx5IHRoaW5ncyB0aGF0IHNob3VsZCByZWNlaXZlIGtleWRvd24va2V5cHJlc3MgZXZlbnRzIGJlZm9yZSB1c1xuICAgIC8vIGFyZSBvdXIgY2hpbGRyZW4uIFRoaXMgYWxsb3dzIGEgTWVudUl0ZW0gdG8gY29udGFpbiBhIHRleHQgaW5wdXRcbiAgICAvLyB3aGljaCBzZWxlY3RpdmVseSBzdG9wcyBwcm9wYWdhdGlvbiBvbiBrZXkgZXZlbnRzIGZvciBleGFtcGxlLlxuICAgIEtlZmlyLm1lcmdlKFtcbiAgICAgIEtlZmlyLmZyb21FdmVudHMod2luZG93LCAna2V5ZG93bicpLmZpbHRlcihpc0VudGVyT3JBcnJvd0tleSlcbiAgICAgICAgLmZpbHRlcihlID0+IGVsLmNvbnRhaW5zKGUudGFyZ2V0KSksXG4gICAgICBmcm9tRXZlbnRzQ2FwdHVyZSh3aW5kb3csICdrZXlkb3duJykuZmlsdGVyKGlzRW50ZXJPckFycm93S2V5KVxuICAgICAgICAuZmlsdGVyKGUgPT4gIWVsLmNvbnRhaW5zKGUudGFyZ2V0KSlcbiAgICBdKVxuICAgICAgLnRha2VVbnRpbEJ5KHRoaXMuX3N0b3BwZXIpXG4gICAgICAub25WYWx1ZShldmVudCA9PiB0aGlzLl9rZXkoZXZlbnQpKTtcblxuICAgIGNvbnN0IHBhcmVudEN0eCA9IHRoaXMuX3BhcmVudEN0eCgpO1xuICAgIGlmIChwYXJlbnRDdHgpIHtcbiAgICAgIHBhcmVudEN0eC5yZWdpc3Rlck1lbnVMaXN0KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX3N0b3BwZXIuZGVzdHJveSgpO1xuXG4gICAgY29uc3QgcGFyZW50Q3R4ID0gdGhpcy5fcGFyZW50Q3R4KCk7XG4gICAgaWYgKHBhcmVudEN0eCkge1xuICAgICAgcGFyZW50Q3R4LnVucmVnaXN0ZXJNZW51TGlzdCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBfbmF0dXJhbEhpZ2hsaWdodChpbmRleDogP251bWJlciwgYnlLZXlib2FyZDogYm9vbGVhbiwgZGlyZWN0aW9uOiA/RGlyZWN0aW9uLCBwcmV2Q3Vyc29yTG9jYXRpb246ID9SZWN0KSB7XG4gICAgY29uc3QgdmlzaWJsZUhpZ2hsaWdodGVkSW5kZXggPSB0aGlzLl9nZXRWaXNpYmxlSGlnaGxpZ2h0ZWRJbmRleCgpO1xuXG4gICAgaWYgKHRoaXMuX2xvY2tlZEhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbCAmJiBieUtleWJvYXJkKSB7XG4gICAgICB0aGlzLl9sb2NrZWRIaWdobGlnaHRlZEluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXggPSBpbmRleDtcbiAgICBpZiAodGhpcy5fbG9ja2VkSGlnaGxpZ2h0ZWRJbmRleCA9PSBudWxsKSB7XG4gICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9saXN0SXRlbXNbaW5kZXhdLmNvbnRyb2wubm90aWZ5SGlnaGxpZ2h0ZWQodHJ1ZSwgYnlLZXlib2FyZCwgZGlyZWN0aW9uLCBwcmV2Q3Vyc29yTG9jYXRpb24pO1xuICAgICAgfVxuICAgICAgaWYgKHZpc2libGVIaWdobGlnaHRlZEluZGV4ICE9IG51bGwgJiYgdmlzaWJsZUhpZ2hsaWdodGVkSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fbGlzdEl0ZW1zW3Zpc2libGVIaWdobGlnaHRlZEluZGV4XS5jb250cm9sLm5vdGlmeUhpZ2hsaWdodGVkKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfbG9ja0hpZ2hsaWdodChpbmRleDogP251bWJlcikge1xuICAgIGlmIChpbmRleCA9PT0gdGhpcy5fbG9ja2VkSGlnaGxpZ2h0ZWRJbmRleCkgcmV0dXJuO1xuICAgIGNvbnN0IHZpc2libGVIaWdobGlnaHRlZEluZGV4ID0gdGhpcy5fZ2V0VmlzaWJsZUhpZ2hsaWdodGVkSW5kZXgoKTtcbiAgICB0aGlzLl9sb2NrZWRIaWdobGlnaHRlZEluZGV4ID0gaW5kZXg7XG4gICAgY29uc3QgbmV3VmlzaWJsZUhpZ2hsaWdodGVkSW5kZXggPSB0aGlzLl9nZXRWaXNpYmxlSGlnaGxpZ2h0ZWRJbmRleCgpO1xuICAgIGlmICh2aXNpYmxlSGlnaGxpZ2h0ZWRJbmRleCAhPSBudWxsICYmIG5ld1Zpc2libGVIaWdobGlnaHRlZEluZGV4ID09IG51bGwpIHtcbiAgICAgIC8vIFdoZW4gdW5sb2NraW5nLCBwcmVmZXIgdG8ga2VlcCB0aGUgY3VycmVudCBzZWxlY3Rpb24gb3ZlciBkZS1zZWxlY3RpbmdcbiAgICAgIC8vIGV2ZXJ5dGhpbmcuXG4gICAgICB0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleCA9IHZpc2libGVIaWdobGlnaHRlZEluZGV4O1xuICAgIH0gZWxzZSBpZiAodmlzaWJsZUhpZ2hsaWdodGVkSW5kZXggIT0gbmV3VmlzaWJsZUhpZ2hsaWdodGVkSW5kZXgpIHtcbiAgICAgIGlmICh2aXNpYmxlSGlnaGxpZ2h0ZWRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2xpc3RJdGVtc1t2aXNpYmxlSGlnaGxpZ2h0ZWRJbmRleF0uY29udHJvbC5ub3RpZnlIaWdobGlnaHRlZChmYWxzZSk7XG4gICAgICB9XG4gICAgICBpZiAobmV3VmlzaWJsZUhpZ2hsaWdodGVkSW5kZXggIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9saXN0SXRlbXNbbmV3VmlzaWJsZUhpZ2hsaWdodGVkSW5kZXhdLmNvbnRyb2wubm90aWZ5SGlnaGxpZ2h0ZWQodHJ1ZSwgZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2xpc3RJdGVtc1t0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleF0uY29udHJvbC5ub3RpZnlIaWdobGlnaHRlZCh0cnVlLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2Rpc3BhdGNoRXZlbnQoY29udHJvbDogP01lbnVJdGVtQ29udHJvbCwgZXZlbnQ6IE1lbnVFdmVudCkge1xuICAgIGlmIChjb250cm9sKSB7XG4gICAgICBjb250cm9sLm5vdGlmeUV2ZW50KGV2ZW50KTtcbiAgICAgIGlmIChldmVudC5jYW5jZWxCdWJibGUpIHJldHVybjtcbiAgICB9XG4gICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgY2FzZSAnY2hvc2VuJzpcbiAgICAgIC8qOjogaWYgKCEoZXZlbnQgaW5zdGFuY2VvZiBDaG9zZW5FdmVudCkpIHRocm93IG5ldyBFcnJvcigpOyAqL1xuICAgICAgaWYgKHRoaXMucHJvcHMub25JdGVtQ2hvc2VuKSB0aGlzLnByb3BzLm9uSXRlbUNob3NlbihldmVudCk7XG4gICAgICBicmVhaztcbiAgICAvLyBjYXNlICd1cCc6XG4gICAgLy8gICBicmVhaztcbiAgICAvLyBjYXNlICdkb3duJzpcbiAgICAvLyAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgaWYgKHRoaXMucHJvcHMub25MZWZ0UHVzaGVkKSB0aGlzLnByb3BzLm9uTGVmdFB1c2hlZChldmVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICBpZiAodGhpcy5wcm9wcy5vblJpZ2h0UHVzaGVkKSB0aGlzLnByb3BzLm9uUmlnaHRQdXNoZWQoZXZlbnQpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChldmVudC5jYW5jZWxCdWJibGUpIHJldHVybjtcbiAgICBjb25zdCBwYXJlbnRDdHggPSB0aGlzLl9wYXJlbnRDdHgoKTtcbiAgICBpZiAocGFyZW50Q3R4KSB7XG4gICAgICBwYXJlbnRDdHguZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgX2tleShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmICh0aGlzLl9rZXlib2FyZFRha2VuQnlJbmRleCAhPSBudWxsIHx8IHRoaXMuX2xpc3RJdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB2aXNpYmxlSGlnaGxpZ2h0ZWRJbmRleCA9IHRoaXMuX2dldFZpc2libGVIaWdobGlnaHRlZEluZGV4KCk7XG5cbiAgICAvLyBlbnRlciwgbGVmdCwgcmlnaHQgYWN0aXZhdGUgZm9yIHRoZSBjdXJyZW50IHZpc2libHkgc2VsZWN0ZWQgaXRlbS5cbiAgICAvLyB1cCBhbmQgZG93biBkZS1hY3RpdmF0ZSBhbnkgbG9ja3MgaW4gcGxhY2UsIHNvIHRoYXQgdGhleSBhY3QgZnJvbSB0aGUgbGFzdFxuICAgIC8vIG5hdHVyYWxseS1zZWxlY3RlZCBpdGVtLlxuXG4gICAgbGV0IG1FdmVudCA9IG51bGw7XG5cbiAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgY2FzZSAxMzogLy9lbnRlclxuICAgICAgaWYgKHZpc2libGVIaWdobGlnaHRlZEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgbUV2ZW50ID0gbmV3IENob3NlbkV2ZW50KCdjaG9zZW4nLCB0cnVlKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM3OiAvL2xlZnRcbiAgICAgIGlmICh2aXNpYmxlSGlnaGxpZ2h0ZWRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgIG1FdmVudCA9IG5ldyBNZW51RXZlbnQoJ2xlZnQnKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzk6IC8vcmlnaHRcbiAgICAgIGlmICh2aXNpYmxlSGlnaGxpZ2h0ZWRJbmRleCAhPSBudWxsKSB7XG4gICAgICAgIG1FdmVudCA9IG5ldyBNZW51RXZlbnQoJ3JpZ2h0Jyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM4OiAvL3VwXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB0aGlzLm1vdmVDdXJzb3IoJ3VwJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQwOiAvL2Rvd25cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMubW92ZUN1cnNvcignZG93bicpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKG1FdmVudCkge1xuICAgICAgY29uc3QgY29udHJvbCA9IHZpc2libGVIaWdobGlnaHRlZEluZGV4ID09IG51bGwgPyBudWxsIDpcbiAgICAgICAgdGhpcy5fbGlzdEl0ZW1zW3Zpc2libGVIaWdobGlnaHRlZEluZGV4XS5jb250cm9sO1xuICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudChjb250cm9sLCBtRXZlbnQpO1xuICAgICAgaWYgKG1FdmVudC5kZWZhdWx0UHJldmVudGVkKSBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKG1FdmVudC5kZWZhdWx0UHJldmVudGVkIHx8IG1FdmVudC5jYW5jZWxCdWJibGUpIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIG1vdmVDdXJzb3IoZGlyZWN0aW9uOiBEaXJlY3Rpb24sIHByZXZDdXJzb3JMb2NhdGlvbjogP1JlY3QpIHtcbiAgICBpZiAodGhpcy5fbGlzdEl0ZW1zLmxlbmd0aCA9PSAwKSByZXR1cm47XG5cbiAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgJ3VwJzpcbiAgICAgIGlmICh0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleCA9PSBudWxsIHx8IHRoaXMuX25hdHVyYWxIaWdobGlnaHRlZEluZGV4ID09IDApIHtcbiAgICAgICAgdGhpcy5fbmF0dXJhbEhpZ2hsaWdodCh0aGlzLl9saXN0SXRlbXMubGVuZ3RoLTEsIHRydWUsIGRpcmVjdGlvbiwgcHJldkN1cnNvckxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX25hdHVyYWxIaWdobGlnaHQodGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXgtMSwgdHJ1ZSwgZGlyZWN0aW9uLCBwcmV2Q3Vyc29yTG9jYXRpb24pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZG93bic6XG4gICAgICBpZiAodGhpcy5fbmF0dXJhbEhpZ2hsaWdodGVkSW5kZXggPT0gbnVsbCB8fCB0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0ZWRJbmRleCA9PSB0aGlzLl9saXN0SXRlbXMubGVuZ3RoLTEpIHtcbiAgICAgICAgdGhpcy5fbmF0dXJhbEhpZ2hsaWdodCgwLCB0cnVlLCBkaXJlY3Rpb24sIHByZXZDdXJzb3JMb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9uYXR1cmFsSGlnaGxpZ2h0KHRoaXMuX25hdHVyYWxIaWdobGlnaHRlZEluZGV4KzEsIHRydWUsIGRpcmVjdGlvbiwgcHJldkN1cnNvckxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGhhc0hpZ2hsaWdodCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0VmlzaWJsZUhpZ2hsaWdodGVkSW5kZXgoKSAhPSBudWxsO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IHJvbGU9XCJtZW51XCIgcmVmPXt0aGlzLl9lbFJlZn0+XG4gICAgICAgIDxNZW51TGlzdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3RoaXMuX21lbnVMaXN0Q29udGV4dH0+XG4gICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDwvTWVudUxpc3RDb250ZXh0LlByb3ZpZGVyPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIl19